---
- import_tasks: defaults.yml

- name: install redis
  yum:
    name: "{{ redis_package_name }}"
    enablerepo: "{{ redis_enablerepo }}"

- name: disable default redis service
  service:
    name: redis
    state: stopped
    enabled: false

- name: create /etc/redis dir
  file:
    path: /etc/redis
    state: directory
    owner: root
    group: root
    mode: 0755
  notify: restart redis

- name: create /var/lib/redis/{{ redis_instance.name }} dir
  file:
    path: /var/lib/redis/{{ redis_instance.name }}
    state: directory
    owner: redis
    group: redis
    mode: 0700

- name: configure redis-base.conf
  template:
    src: redis/redis-base.conf
    dest: /etc/redis/redis-base.conf
    owner: root
    group: root
    mode: "0644"
  register: redis_config_changed_base
  notify: restart redis

# Set a fact, so if this changes in one instance of this role, all instances of redis will be registered for restart
- name: identify changed base configuration
  set_fact: redis_base_config_changed=yes
  when: redis_config_changed_base is changed

- name: configure redis-{{ redis_instance.name }} service
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode }}"
  with_items:
    - src: redis/redis.conf
      dest: /etc/redis/redis-{{ redis_instance.name }}.conf
      mode: "0644"
    - src: redis.service.j2
      dest: /etc/systemd/system/redis-{{ redis_instance.name }}.service
      mode: "0644"
  register: redis_config_changed
  notify:
    - reload systemd configuration
    - restart redis

- name: >
    allow redis-{{ redis_instance.name }} service to listen on TCP ports
    {{ redis_instance.port }},
    1{{ redis_instance.port }},
    2{{ redis_instance.port }}
  seport:
    ports:
      - "2{{ redis_instance.port }}"  # port used for clustering
      - "1{{ redis_instance.port }}"  # port used for clustering
      - "{{ redis_instance.port }}"
    proto: tcp
    setype: redis_port_t
    state: present

# append the actual service name to list which the "restart redis" handler iterates
# this is neccessary because handlers cannot use variables in the same way tasks can
- name: register redis-{{ redis_instance.name }} restart
  set_fact: redis_service_restart="{{ redis_service_restart|default([]) }} + [ 'redis-{{ redis_instance.name }}' ]"
  when: (redis_config_changed is changed) or (redis_base_config_changed)

- name: starting redis-{{ redis_instance.name }} service
  service:
    name: redis-{{ redis_instance.name }}
    state: started
    enabled: true
